(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{633:function(s,t,a){"use strict";a.r(t);var e=a(17),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"修改运行中的docker容器的端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改运行中的docker容器的端口映射"}},[s._v("#")]),s._v(" 修改运行中的docker容器的端口映射")]),s._v(" "),a("p",[s._v("在docker run创建并运行容器的时候，可以通过-p指定端口映射规则。但是，我们经常会遇到刚开始忘记设置端口映射或者设置错了需要修改。当docker start运行容器后并没有提供一个-p选项或设置，让你修改指定端口映射规则。那么这种情况我们该怎么处理呢？今天Docker君教你如何修改运行中的docker容器的端口映射？")]),s._v(" "),a("h2",{attrs:{id:"方法一-删除原有容器-重新建新容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一-删除原有容器-重新建新容器"}},[s._v("#")]),s._v(" 方法一：删除原有容器，重新建新容器")]),s._v(" "),a("p",[s._v("这个解决方案最为简单，把原来的容器删掉，重新建一个。当然这次不要忘记加上端口映射。")]),s._v(" "),a("h2",{attrs:{id:"方法二-修改容器配置文件-重启docker服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二-修改容器配置文件-重启docker服务"}},[s._v("#")]),s._v(" 方法二：修改容器配置文件，重启docker服务")]),s._v(" "),a("p",[s._v("容器的配置文件路径：")]),s._v(" "),a("p",[s._v("/var/lib/docker/containers/[hash_of_the_container]/hostconfig.json")]),s._v(" "),a("p",[s._v("其中的hashofthecontainer是docker镜像的hash值，可以通过docker ps或者docker inspect containername查看。（CONTAINER ID就可以看出来）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgoss.xgss.net/picgo/image-20200917093804772.png?aliyun",alt:"image-20200917093804772"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('systemctl stop docker\n进入docker项目的配置目录\n# cd /var/lib/docker/containers/bc96d2777c64583b2a02c5864e452e71cb370cb587f00c262e2df242fb4d8d69/\n# vi hostconfig.json \n把：[{"HostIp":"","HostPort":"9022"}]改成[{"HostIp":"192.168.20.178","HostPort":"9022"}]\n# vi config.v2.json\n\n未修改之前的：\n# docker ps\nCONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                                                 NAMES\nbc96d2777c64        jumpserver/jms_all:latest   "./entrypoint.sh"   5 weeks ago         Up 5 weeks          192.168.20.178:9000->80/tcp, 0.0.0.0:9022->2222/tcp   jms_all\n\nsystemctl start docker\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("修改防火墙：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' vi /etc/sysconfig/iptables\n -A DOCKER ! -i docker0 -p tcp -m tcp --dport 9022 -j DNAT --to-destination 172.17.0.2:2222\n改成\n-A DOCKER -d 192.168.20.178/32 ! -i docker0 -p tcp -m tcp --dport 9022 -j DNAT --to-destination 172.17.0.2:2222\n\nsystemctl restart iptables\n\n修改之后 重启：\nsystemctl start docker\nCONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                                                        NAMES\nbc96d2777c64        jumpserver/jms_all:latest   "./entrypoint.sh"   5 weeks ago         Up 6 seconds        192.168.20.178:9000->80/tcp, 192.168.20.178:9022->2222/tcp   jms_all\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"方法三-利用docker-commit新构镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法三-利用docker-commit新构镜像"}},[s._v("#")]),s._v(" 方法三：利用docker commit新构镜像")]),s._v(" "),a("p",[s._v("​    docker commit：把一个容器的文件改动和配置信息commit到一个新的镜像。这个在测试的时候会非常有用，把容器所有的文件改动和配置信息导入成一个新的docker镜像，然后用这个新的镜像重起一个容器，这对之前的容器不会有任何影响。")]),s._v(" "),a("h3",{attrs:{id:"_1、停止docker容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、停止docker容器"}},[s._v("#")]),s._v(" 1、停止docker容器")]),s._v(" "),a("p",[s._v("docker stop container01")]),s._v(" "),a("h3",{attrs:{id:"_2、commit该docker容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、commit该docker容器"}},[s._v("#")]),s._v(" 2、commit该docker容器")]),s._v(" "),a("p",[s._v("docker commit container01 new_image:tag")]),s._v(" "),a("h3",{attrs:{id:"_3、用前一步新生成的镜像重新起一个容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、用前一步新生成的镜像重新起一个容器"}},[s._v("#")]),s._v(" 3、用前一步新生成的镜像重新起一个容器")]),s._v(" "),a("p",[s._v("docker run --name container02 -p 80:80 new_image:tag")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("优缺点：这种方式的优点是不会影响统一宿主机上的其他容器，缺点是管理起来显得比较乱，没有第二种方法那么直观。\n")])])]),a("p",[s._v("参考：")]),s._v(" "),a("p",[s._v("https://www.cnblogs.com/shijf/p/10386193.html")])])}),[],!1,null,null,null);t.default=n.exports}}]);